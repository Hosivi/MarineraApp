// <auto-generated />
using System;
using Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240512035701_m1.0.3")]
    partial class m103
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ModalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModalityId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Concourse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegisterOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TicketOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RegisterOfficeId");

                    b.HasIndex("TicketOfficeId");

                    b.ToTable("Concourses", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.ConcourseRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ConcourseRules", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Modality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegisterOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegisterOfficeId");

                    b.ToTable("Modalities", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.RegisterOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("RegisterOffices", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.TicketOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TicketOffices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f8dc665-f43e-42e4-a176-2926141f2ea4"),
                            CreationDate = new DateTimeOffset(new DateTime(2024, 5, 12, 3, 57, 0, 375, DateTimeKind.Unspecified).AddTicks(8046), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Default Organization"
                        });
                });

            modelBuilder.Entity("Domain.Aggregates.Category", b =>
                {
                    b.HasOne("Domain.Aggregates.Modality", "Modality")
                        .WithMany("Categories")
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modality");
                });

            modelBuilder.Entity("Domain.Aggregates.Concourse", b =>
                {
                    b.HasOne("Domain.Aggregates.RegisterOffice", null)
                        .WithOne("Concourse")
                        .HasForeignKey("Domain.Aggregates.Concourse", "Id");

                    b.HasOne("Domain.Aggregates.TicketOffice", null)
                        .WithOne("Concourse")
                        .HasForeignKey("Domain.Aggregates.Concourse", "Id");

                    b.HasOne("Domain.Entities.Organization", "Organization")
                        .WithMany("Concourses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.RegisterOffice", "RegisterOffice")
                        .WithMany()
                        .HasForeignKey("RegisterOfficeId");

                    b.HasOne("Domain.Aggregates.TicketOffice", "TicketOffice")
                        .WithMany()
                        .HasForeignKey("TicketOfficeId");

                    b.Navigation("Organization");

                    b.Navigation("RegisterOffice");

                    b.Navigation("TicketOffice");
                });

            modelBuilder.Entity("Domain.Aggregates.ConcourseRule", b =>
                {
                    b.HasOne("Domain.Aggregates.Category", null)
                        .WithMany("ConcourseRules")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Domain.Aggregates.Modality", b =>
                {
                    b.HasOne("Domain.Aggregates.RegisterOffice", null)
                        .WithMany("Modalities")
                        .HasForeignKey("RegisterOfficeId");
                });

            modelBuilder.Entity("Domain.Aggregates.Category", b =>
                {
                    b.Navigation("ConcourseRules");
                });

            modelBuilder.Entity("Domain.Aggregates.Modality", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Domain.Aggregates.RegisterOffice", b =>
                {
                    b.Navigation("Concourse");

                    b.Navigation("Modalities");
                });

            modelBuilder.Entity("Domain.Aggregates.TicketOffice", b =>
                {
                    b.Navigation("Concourse");
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.Navigation("Concourses");
                });
#pragma warning restore 612, 618
        }
    }
}
